// <auto-generated />
using System;
using FAQwebApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FAQwebApp.Data.Migrations
{
    // Klasa reprezentująca migawkę modelu (snapshot) dla bazy danych
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        // Metoda odpowiedzialna za budowanie modelu bazy danych
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            // Ustawienia dotyczące wersji produktu i maksymalnej długości identyfikatora
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            // Ustawienia dla korzystania z kolumn automatycznie generowanych przez bazę danych
            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            // Konfiguracja encji dla modelu FAQ
            modelBuilder.Entity("FAQwebApp.Models.FAQ", b =>
            {
                // Ustawienia właściwości ID
                b.Property<int>("id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                // Konfiguracja kolumny ID jako automatycznie generowanej przez bazę danych
                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                // Konfiguracja właściwości odpowiedzi
                b.Property<string>("Answer")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                // Konfiguracja właściwości pytania
                b.Property<string>("Question")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                // Ustawienia klucza głównego dla encji FAQ
                b.HasKey("id");

                // Ustawienia dla mapowania encji na tabelę FAQ
                b.ToTable("FAQ");
            });

            // Konfiguracja encji dla roli w systemie Identity
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
            {
                // Ustawienia właściwości ID
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");

                // Ustawienia właściwości do optymistycznego współbieżnego zarządzania
                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("nvarchar(max)");

                // Ustawienia właściwości nazwy roli
                b.Property<string>("Name")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                // Ustawienia właściwości znormalizowanej nazwy roli
                b.Property<string>("NormalizedName")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                // Ustawienia klucza głównego dla encji roli
                b.HasKey("Id");

                // Ustawienia indeksu dla znormalizowanej nazwy roli
                b.HasIndex("NormalizedName")
                    .IsUnique()
                    .HasDatabaseName("RoleNameIndex")
                    .HasFilter("[NormalizedName] IS NOT NULL");

                // Ustawienia dla mapowania encji na tabelę AspNetRoles
                b.ToTable("AspNetRoles", (string)null);
            });

            // Konfiguracja encji dla roszczenia roli w systemie Identity
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                // Ustawienia właściwości ID
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                // Konfiguracja kolumny ID jako automatycznie generowanej przez bazę danych
                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                // Ustawienia właściwości typu roszczenia
                b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(max)");

                // Ustawienia właściwości wartości roszczenia
                b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(max)");

                // Ustawienia właściwości ID roli, do której przypisane jest roszczenie
                b.Property<string>("RoleId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                // Ustawienia klucza głównego dla encji roszczenia roli
                b.HasKey("Id");

                // Ustawienia indeksu dla ID roli
                b.HasIndex("RoleId");

                // Ustawienia dla mapowania encji na tabelę AspNetRoleClaims
                b.ToTable("AspNetRoleClaims", (string)null);
            });

            // Konfiguracja encji dla użytkownika w systemie Identity
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
            {
                // Ustawienia właściwości ID
                b.Property<string>("Id")
                    .HasColumnType("nvarchar(450)");

                // Ustawienia właściwości dla danych logowania
                b.Property<int>("AccessFailedCount")
                    .HasColumnType("int");

                // Ustawienia właściwości do optymistycznego współbieżnego zarządzania
                b.Property<string>("ConcurrencyStamp")
                    .IsConcurrencyToken()
                    .HasColumnType("nvarchar(max)");

                // Ustawienia właściwości adresu email
                b.Property<string>("Email")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                // Ustawienia właściwości potwierdzenia adresu email
                b.Property<bool>("EmailConfirmed")
                    .HasColumnType("bit");

                // Ustawienia właściwości blokady konta
                b.Property<bool>("LockoutEnabled")
                    .HasColumnType("bit");

                // Ustawienia właściwości zakończenia blokady konta
                b.Property<DateTimeOffset?>("LockoutEnd")
                    .HasColumnType("datetimeoffset");

                // Ustawienia właściwości znormalizowanego adresu email
                b.Property<string>("NormalizedEmail")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                // Ustawienia właściwości znormalizowanej nazwy użytkownika
                b.Property<string>("NormalizedUserName")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                // Ustawienia właściwości hasła
                b.Property<string>("PasswordHash")
                    .HasColumnType("nvarchar(max)");

                // Ustawienia właściwości numeru telefonu
                b.Property<string>("PhoneNumber")
                    .HasColumnType("nvarchar(max)");

                // Ustawienia właściwości potwierdzenia numeru telefonu
                b.Property<bool>("PhoneNumberConfirmed")
                    .HasColumnType("bit");

                // Ustawienia właściwości znaku bezpieczeństwa
                b.Property<string>("SecurityStamp")
                    .HasColumnType("nvarchar(max)");

                // Ustawienia właściwości włączenia autentykacji dwuetapowej
                b.Property<bool>("TwoFactorEnabled")
                    .HasColumnType("bit");

                // Ustawienia właściwości nazwy użytkownika
                b.Property<string>("UserName")
                    .HasMaxLength(256)
                    .HasColumnType("nvarchar(256)");

                // Ustawienia klucza głównego dla encji użytkownika
                b.HasKey("Id");

                // Ustawienia indeksu dla znormalizowanego adresu email
                b.HasIndex("NormalizedEmail")
                    .HasDatabaseName("EmailIndex");

                // Ustawienia indeksu dla znormalizowanej nazwy użytkownika
                b.HasIndex("NormalizedUserName")
                    .IsUnique()
                    .HasDatabaseName("UserNameIndex")
                    .HasFilter("[NormalizedUserName] IS NOT NULL");

                // Ustawienia dla mapowania encji na tabelę AspNetUsers
                b.ToTable("AspNetUsers", (string)null);
            });

            // Konfiguracja encji dla roszczenia użytkownika w systemie Identity
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                // Ustawienia właściwości ID
                b.Property<int>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                // Konfiguracja kolumny ID jako automatycznie generowanej przez bazę danych
                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                // Ustawienia właściwości typu roszczenia
                b.Property<string>("ClaimType")
                    .HasColumnType("nvarchar(max)");

                // Ustawienia właściwości wartości roszczenia
                b.Property<string>("ClaimValue")
                    .HasColumnType("nvarchar(max)");

                // Ustawienia właściwości ID użytkownika, do którego przypisane jest roszczenie
                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                // Ustawienia klucza głównego dla encji roszczenia użytkownika
                b.HasKey("Id");

                // Ustawienia indeksu dla ID użytkownika
                b.HasIndex("UserId");

                // Ustawienia dla mapowania encji na tabelę AspNetUserClaims
                b.ToTable("AspNetUserClaims", (string)null);
            });

            // Konfiguracja encji dla logowania użytkownika w systemie Identity
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                // Ustawienia właściwości dostawcy logowania
                b.Property<string>("LoginProvider")
                    .HasMaxLength(128)
                    .HasColumnType("nvarchar(128)");

                // Ustawienia właściwości klucza dostawcy logowania
                b.Property<string>("ProviderKey")
                    .HasMaxLength(128)
                    .HasColumnType("nvarchar(128)");

                // Ustawienia właściwości nazwy dostawcy logowania
                b.Property<string>("ProviderDisplayName")
                    .HasColumnType("nvarchar(max)");

                // Ustawienia właściwości ID użytkownika, do którego przypisane jest logowanie
                b.Property<string>("UserId")
                    .IsRequired()
                    .HasColumnType("nvarchar(450)");

                // Ustawienia klucza głównego dla encji logowania użytkownika
                b.HasKey("LoginProvider", "ProviderKey");

                // Ustawienia indeksu dla ID użytkownika
                b.HasIndex("UserId");

                // Ustawienia dla mapowania encji na tabelę AspNetUserLogins
                b.ToTable("AspNetUserLogins", (string)null);
            });

            // Konfiguracja encji dla przypisania roli do użytkownika w systemie Identity
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                // Ustawienia właściwości ID użytkownika
                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                // Ustawienia właściwości ID roli
                b.Property<string>("RoleId")
                    .HasColumnType("nvarchar(450)");

                // Ustawienia klucza głównego dla encji przypisania roli do użytkownika
                b.HasKey("UserId", "RoleId");

                // Ustawienia indeksu dla ID roli
                b.HasIndex("RoleId");

                // Ustawienia dla mapowania encji na tabelę AspNetUserRoles
                b.ToTable("AspNetUserRoles", (string)null);
            });

            // Konfiguracja encji dla tokenów użytkownika w systemie Identity
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                // Ustawienia właściwości ID użytkownika
                b.Property<string>("UserId")
                    .HasColumnType("nvarchar(450)");

                // Ustawienia właściwości dostawcy logowania
                b.Property<string>("LoginProvider")
                    .HasMaxLength(128)
                    .HasColumnType("nvarchar(128)");

                // Ustawienia właściwości nazwy tokena
                b.Property<string>("Name")
                    .HasMaxLength(128)
                    .HasColumnType("nvarchar(128)");

                // Ustawienia właściwości wartości tokena
                b.Property<string>("Value")
                    .HasColumnType("nvarchar(max)");

                // Ustawienia klucza głównego dla encji tokena użytkownika
                b.HasKey("UserId", "LoginProvider", "Name");

                // Ustawienia dla mapowania encji na tabelę AspNetUserTokens
                b.ToTable("AspNetUserTokens", (string)null);
            });

            // Konfiguracja relacji między encjami roszczenia roli i roli
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            // Konfiguracja relacji między encjami roszczenia użytkownika i użytkownika
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            // Konfiguracja relacji między encjami logowania użytkownika i użytkownika
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            // Konfiguracja relacji między encjami przypisania roli do użytkownika, roli i użytkownika
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                    .WithMany()
                    .HasForeignKey("RoleId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });

            // Konfiguracja relacji między encjami tokenów użytkownika i użytkownika
            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
            {
                b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                    .WithMany()
                    .HasForeignKey("UserId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();
            });
#pragma warning restore 612, 618
        }
    }
}
